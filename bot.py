import os
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É —Å–µ–∫—Ä–µ—Ç–∞—Ö fly.io
TOKEN = os.getenv("BOT_TOKEN")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Excel-—Ç–∞–±–ª–∏—Ü—é (–º–∞—î –±—É—Ç–∏ –≤ —Ü—ñ–π –∂–µ –ø–∞–ø—Ü—ñ)
df = pd.read_excel("data.xlsx")

# –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ—à—É–∫ —É –±–∞–∑—ñ", callback_data="search")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="contacts")],
        [InlineKeyboardButton("–î–æ–≤—ñ–¥–∫–∞", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "search":
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª –±–ª–æ–∫—É —á–∏ –Ω–∞–∑–≤—É –¥–∞—Ç–∞—Å–µ—Ç—É –¥–ª—è –ø–æ—à—É–∫—É:")
        # –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è MessageHandler
    elif query.data == "contacts":
        await query.message.reply_text("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏:\nEmail: datenflash@proton.me\n–¢–µ–ª–µ–≥—Ä–∞–º: @mukich1")
    elif query.data == "help":
        await query.message.reply_text("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞:\n1Ô∏è‚É£ –ü–æ—à—É–∫ —É –±–∞–∑—ñ ‚Äî –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n2Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç–∏ ‚Äî –∑–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.\n3Ô∏è‚É£ –î–æ–≤—ñ–¥–∫–∞ ‚Äî —Ü—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è.")

# –ü–æ—à—É–∫ —É –±–∞–∑—ñ
async def search_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    mask = (
        df['Article'].str.contains(query, case=False, na=False) |
        df['Dataset'].str.contains(query, case=False, na=False)
    )
    result = df[mask]
    if not result.empty:
        await update.message.reply_text(result.to_string(index=False))
    else:
        await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_database))
    app.run_polling()

if __name__ == "__main__":
    main()
